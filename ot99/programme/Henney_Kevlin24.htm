<HTML><HEAD><TITLE>OT 99 Session</TITLE><BODY BGCOLOR=ffffff>
<TABLE><TR BGCOLOR=0080ff><TD>&nbsp;<A HREF=/ot99 target=_top><FONT FACE=Arial COLOR=ffffff SIZE=-1><B>OT99</B></FONT></A>&nbsp;</TD>
<TD>&nbsp;<A HREF=/ot99/programme.html target=_top><FONT FACE=Arial COLOR=ffffff SIZE=-1><B>programme</B></FONT></A>&nbsp;</TD>
<TD>&nbsp;<A HREF=/ot99/people target=_top><FONT FACE=Arial COLOR=ffffff SIZE=-1><B>people</B></FONT></A>&nbsp;</TD>
<TD>&nbsp;<A HREF=/ot99/bookOnline.html target=_top><FONT FACE=Arial COLOR=ffffff SIZE=-1><B>Book</B></FONT></A>&nbsp;</TD>
<TD>&nbsp;<A HREF=Heap_Tony51.htm OT=back><FONT FACE=Arial COLOR=ffffff SIZE=-1><B>&lt;--</B></FONT></A>&nbsp;</TD>
<TD>&nbsp;<A HREF=Henney_Kevlin25.htm OT=fwd><FONT FACE=Arial COLOR=ffffff SIZE=-1><B>--&gt;</B></FONT></A>&nbsp;</TD>
</TR></TABLE>
<HR>

<H1 align=center>Patterns Inside Out</H1>
<H4 align=center>Monday 2:15
&nbsp;&nbsp;Workshop	170 minutes</H4><H3 align=center>The relationship between structurally different patterns                that address similar problems
<P>
<P>
</H3>
<CENTER><H2><A HREF=/ot99/people/khenneyqatraining-card.html OT=a>Kevlin Henney</A></H2></CENTER>
<P align=left><BLOCKQUOTE><P>
            Many pattern users often assume that the general solution
            to a particular type of problem is addressed by a single
            pattern and its variations, eg state modelling and the State
            pattern, iteration and Iterator.
            
            Patterns -- their applicability and configuration -- are
            strongly related to the finer details of their context and
            the forces found there. A slight change in these, such as the
            language of implementation or the architectural context, can
            result in radically different solutions. Often the resulting
            configuration of one approach looks to be the inverse of
            another.
            
            For instance, Enumeration Method offers an alternative approach
            to iteration that is better suited to an analysis view, a
            Smalltalk implementation, or a multithreaded system than Iterator.
            The common name of the State pattern suggests itself as the main
            or only solution for implementing state models. Its alternative
            name, Objects for States, is more suggestive of the internal
            modelling of a state model within an object. By contrast,
            Collections for States defines the state of groups of objects
            externally by holding objects in the same state in the same
            collection.
<P>
</BLOCKQUOTE>
<TABLE width=100%><TR VALIGN=TOP OT=a><TD width=25%>
<H4><A HREF=/ot99/people/khenneyqatraining-card.html OT=a>Kevlin Henney</A></H4>
</TD><TD width=75%><P>
    I am a Senior Technologist with QA Training, specialising
    in programming languages and architectures. Before this my
    background was principally in engineering and soft real-time
    systems. The buzzwords of interest here are C++, OOD,
    frameworks, multithreading and distribution.
    
    There's a lot that interests me, but an enduring theme has
    been design and implementation techniques, particularly
    within an OO context. The use of patterns in general, and
    not simply design patterns, has dominated my interest for a
    number of years. Beyond their simple application, I am
    interested in the relationships that many patterns have to
    each other and the subtle dependencies they have on context
    -- for instance when constrasting idioms in different
    languages, language models or technologies.
<P>

</TD></TR><TR VALIGN=top><TD OT=dt><H3>Topics</H3></TD><TD  OT=dd><UL><P>
<LI> Pattern relationships, such as usage (eg Factory Method and
              Abstract Factory), and specialisation (eg Prototype from
              Factory Method).
<LI> Specialisation within a given context, eg idioms for
              distribution or for a particular language.
<LI> Patterns that solve similar problems: the subtle differences
              and similarities in terms of context, problem and configuration.
<LI> Examples of patterns to similar problems that are almost
              opposites in terms of their configurations such as Resource
              Acquisition is Initialisation vs Execute Around Method, Iterator
              vs Enumeration Method, and Objects for States vs Collections for
              States.
<LI> Investigation of how to select between such opposite patterns
              based on understanding of context and forces.
<P>
</UL>
</TD></TR><TR VALIGN=top><TD OT=dt><H3>Benefits</H3></TD><TD  OT=dd><P>
            It is hoped that this session will raise attendees'
            awareness of the sensitivity of a pattern solution to the
            context and detail of a problem, illustrating that sometimes
            similar problems give rise to patterns that are almost the
            inverse of each other.
            
            The session will also show some concrete examples of such
            alternatives that may be directly useful in development
            work. The focus of the session is design patterns and idioms,
            but the principle can be applied to other pattern types.
<P>
<P>
<TABLE width=100% OT=limits><TR BGCOLOR=80ffff><TD width=20%><B>Level:</B> intermediate</TD><TD><B>Audience:</B> Pattern literate developers interested                in relationships between different design                patterns and idioms</TD></TR></TABLE>
</TD></TR><TR VALIGN=top><TD OT=dt><H4>Material</H4></TD><TD  OT=dd>
<P>
            Copies of slides plus notes, and the examples that will be
            used for the group work.
<P>

</TD></TR><TR VALIGN=top><TD OT=dt><H4>Delivery</H4></TD><TD  OT=dd>
<P>
            Posters with some of the conclusions and examples from the
            group work.
<P>

</TD></TR><TR VALIGN=top><TD OT=dt><H4>Format</H4></TD><TD  OT=dd>
<P>
            A mixture of presented material, questions and group work.
            The group work will revolve around different groups having
            a look at a problem description and trying to identify, given
            two contrasting solutions, what features of context or the
            problem might affect the decision to apply the pattern.
<P>

</TD></TR><TR VALIGN=top><TD OT=dt><H4>Structure</H4></TD><TD  OT=dd>
<P>
<P>
            (10 mins) Review of pattern relationships.
                      <P>
            (25 mins) Patterns that solve similar problems: the
                      subtle differences and similarities in terms
                      of context, problem and configuration.
                      <P>
            (30 mins) Small workshop comparing and contrasting
                      different solutions to similar problems,
                      in particular trying to understand what
                      details of the context and problem lead to
                      different configurations.
                      <P>
            (10 mins) Conclusions and close.
<P>
</UL>
</TD></TR></TABLE>
<HR>
<TABLE><TR BGCOLOR=0080ff><TD>&nbsp;<A HREF=/ot99 target=_top><FONT FACE=Arial COLOR=ffffff SIZE=-1><B>OT99</B></FONT></A>&nbsp;</TD>
<TD>&nbsp;<A HREF=/ot99/programme.html target=_top><FONT FACE=Arial COLOR=ffffff SIZE=-1><B>programme</B></FONT></A>&nbsp;</TD>
<TD>&nbsp;<A HREF=/ot99/people target=_top><FONT FACE=Arial COLOR=ffffff SIZE=-1><B>people</B></FONT></A>&nbsp;</TD>
<TD>&nbsp;<A HREF=/ot99/bookOnline.html target=_top><FONT FACE=Arial COLOR=ffffff SIZE=-1><B>Book</B></FONT></A>&nbsp;</TD>
<TD>&nbsp;<A HREF=Heap_Tony51.htm OT=back><FONT FACE=Arial COLOR=ffffff SIZE=-1><B>&lt;--</B></FONT></A>&nbsp;</TD>
<TD>&nbsp;<A HREF=Henney_Kevlin25.htm OT=fwd><FONT FACE=Arial COLOR=ffffff SIZE=-1><B>--&gt;</B></FONT></A>&nbsp;</TD>
</TR></TABLE>
</HTML>
