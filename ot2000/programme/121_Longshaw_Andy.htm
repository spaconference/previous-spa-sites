<HTML><HEAD><TITLE>OT 99 Proposal</TITLE><BODY BGCOLOR=ffffff>
<TABLE OT=name><TR><TD bgcolor="000000"><H1><font color="ffffff">121 </font></H1></TD><TD>121_Longshaw_Andy.htm</TD></TR></TABLE>
<H1 align=center>No More Need for Plumbers</H1>
<H4 align=center>Goldfish bowl		75 minutes</H4><H3 align=center>How dumb can software become? Do middle-tier componentenvironments spell the end for specialist distributed systems
developers?
<P>
<P>
</H3>
<CENTER><H2>Andy Longshaw</H2></CENTER>
<P align=left><BLOCKQUOTE>			The arrival of middle-tier component environments such as EJB, COM+
and the CORBA Component Model has provided an unprecedented level of
support for developers of distributed systems. These environments
provide functionality such as declarative attributes for transaction and
security requirements, automatic persistence and pooling of many kinds.
These are precisely the areas where experienced, low-level, distributed
systems developers have proved their (not inconsiderable) worth to their
companies and clients. If this functionality can now be automatically
generated, what is left for these specialist developers? Must they all
now learn VB? 
<P>
</BLOCKQUOTE>
<H4>Andy Longshaw (<A HREF=mailto:andyl@contentm.com>andyl@contentm.com</A>)</H4>
<TABLE width=100%><tr valign=top><TD width=25%>
<A HREF=http://www.contentm.com>Content Master</A><BR>
</TD><TD width=75%><P>
Andy is a founder member of and Principal Technologist
at Content Master. In this role he is responsible for
the creation of various types of technical content such
as training courses and whitepapers. Andy's areas of
expertise include Java, XML and component systems.
Throughout the past three years, Andy has given a series
of conference sessions on Java, XML, middle-tier
component architectures and COM/COM+. In his previous
5 years at QA Training, Andy helped to build one
of the UK's largest Java curricula outside of Sun including
Enterprise topics such as CORBA, RMI, Enterprise JavaBeans,
JDBC and COM interoperability. He was also involved in
developing QA's COM and COM+ curriculum and recently
helped to co-develop Microsoft's "Building Solutions for
Microsoft Windows 2000 with Visual C++" and "Building
XML-Based Web Applications" courses.
<P>
</TD></TR></TABLE>
<H3>Topics</H3><UL><LI> The benefits brought to application developers by middle-tier
component environments
<LI> What developers had to do before they appeared
<LI> Can they really do what they claim?
<LI> How far can you really isolate "run of the mill" developers from
the complexity of the environments they are using?
<LI> What are the holes left for specialists to fill?
<LI> Are there any new "techie" problems that need addressing in this
area?
<P>
			
<P>
</UL>
<H3>Benefits</H3>			The intention is to discover the various pitfalls in using the
middle-tier component environments. Can you really use them in such a
"dumb" way, ignoring what is going on under the covers? Can they really
do all that they say they can? If they cannot, how does this change the
application of the skills of the distributed developer (i.e. what holes
do they have to plug)? If they can provide such an environment, then
where are the next batch of problems arise in this area that will call
for in-depth technical expertise?
<P>
<P>
<TABLE width=100%><TR BGCOLOR=80ffff><TD width=80%>
<B>Session:</B> Goldfish bowl		75 minutes
</TD><TD width=20%>
<B>Level:</B> basic	  
</TD></TR><TR BGCOLOR=80ffff><TD>
<B>Audience:</B> Almost anyone, from technical managers to grungy developers
</TD><TD>
<B>Max</B> 60
</TD></TR></TABLE>
<H4>Material</H4>
			Basic discussion background material. Brief whitepaper on the
proposed benefits of such environments.

<H4>Delivery</H4>
			Discussion summary posted on the web at
http://techland.qatraining.com

<H4>Format</H4>
			Standard goldfish bowl.
<P>

<TABLE OT=name><TR><TD bgcolor="000000"><H1><font color="ffffff">121 </font></H1></TD><TD>121_Longshaw_Andy.htm</TD></TR></TABLE>
</BODY></HTML>
