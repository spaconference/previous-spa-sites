<HTML><HEAD><TITLE>OT 99 Proposal</TITLE><BODY BGCOLOR=ffffff>
<table OT=name><tr><td bgcolor=000000><b><font color=ffffff>138</font></b></td><td OT=nav><A href=136_Sharp_Helen.htm><img src=prvs.gif border=0></a><a href=../programme.html><img src=up.gif border=0></a><a href=140_Sparling_Michael.htm><img src=next.gif border=0></a>
</td></table>
<H1 align=center>Aspect-Oriented Programming with AspectJ</H1>
<H4 align=center>Tutorial		75 minutes</H4><H3 align=center>Exploring an alternative approach to software modularity<P>
<P>
</H3>
<CENTER><H2><A HREF=http://www.doc.ic.ac.uk/~mcs98/>Mark Skipper</A></H2></CENTER>
<P align=left><BLOCKQUOTE>	
	
	
<P>
Objects allow us to cleanly encapsulate many software 
functionality concerns inside well-defined object classes. 
But objects don't help so much with systemic concerns 
such as synchronization, multi-object protocols, 
resource sharing, distribution, memory management, 
replication and the like. 
These concerns are not well localised by class-based
decomposition.
They tend to cross-cut the system's class and module structure. 
In fact, much of the complexity and brittleness 
in existing systems appears to result from 
the implementation of these kinds of concerns being 
intertwined throughout the code. 
Aspects are a new unit of software modularity
that provide a better way to manage cross-cutting concerns. 
Aspects, like objects,  can be used in both design and implementation. 
Aspect-oriented design facilitates thinking about cross-cutting
concerns as well-defined entities. 
Aspect-oriented programming languages make it possible 
to program directly in terms of design aspects as well 
as objects and classes.
<P>
This tutorial will introduce Aspect-oriented programming concepts
and show how to deal with the problems of cross-cutting concerns.
Concrete examples and illustrations will be given using
the aspect-oriented proramming language AspectJ which 
adds aspect-oriented support to Java.
<P>
<P>
</BLOCKQUOTE>
<H4><A HREF=http://www.doc.ic.ac.uk/~mcs98/>Mark Skipper</A> (<A HREF=mailto:mcs@bcs.org.uk>mcs@bcs.org.uk</A>)</H4>
<TABLE width=100%><tr valign=top><TD width=25%>
<A HREF=http://talk.to/centuria/>Centuria Consultants Ltd</A><BR>
</TD><TD width=75%><P>
<P>
<P>
<P>
<P>
<P>
</TD></TR></TABLE>
<H3>Topics</H3><UL>	
	
<P>
<LI> What is Aspect Oriented Programming?
<LI> What problem does AOP solve?
<LI> How does AOP help improve modularity and separation of concerns?
<LI> AspectJ: the Aspect-Oriented extension to Java
<LI> Using Aspect-Oriented decomposition to structure software
			
</UL>
<H3>Benefits</H3>	
	
	
<P>
Participants will gain first-hand experience of
using the aspect-oriented approach to structuring software.
They will see how AspectJ allows separation of otherwise
cross-cutting concerns in Java development.
They will be introduced to the concepts and terminology of
aspect-oriented programming.
(Technical details of the AspectJ language will not be included.)
<P>
<P>
<P>
<P>
<TABLE width=100%><TR BGCOLOR=80ffff><TD width=80%>
<B>Session:</B> Tutorial		75 minutes
</TD><TD width=20%>
<B>Level:</B> basic 
</TD></TR><TR BGCOLOR=80ffff><TD>
<B>Audience:</B>              
<P>
The session is aimed at anyone involved in software development.
Participants are expected to have some experience of building
software using object-oriented techniques.
Knowledge of an object-oriented programming language will be helpful
but is not required.
Experienced AspectJ programmers are unlikley to gain a great deal
since this is a basic level turorial.
<P>

</TD><TD>
<B>Max</B> 
</TD></TR></TABLE>
<H4>Material</H4>
             
             
             
<P>
Presentation material for the tutorial will be available
in advance.
<P>

<H4>Delivery</H4>
             
             
<P>
Tutorial (could be a workshop @ 3 hrs if the exercise turns out well)
<P>

<H4>Format</H4>
             
             
<P>
See above. After the initial introduction the session
should be lead by the requirements of the participants
as they tackle the exercise. A final conclusion session
will reaffirm their learning experience.
<P>
The idea is that, after a suitable introduction, the 
participants will be able to pull out the ideas of 
AspectJ.  Those who already know something of AspectJ
will be able to apply their knowledge. 
<P>

<hr> <table OT=name><tr><td bgcolor=000000><b><font color=ffffff>138</font></b></td><td OT=nav><A href=136_Sharp_Helen.htm><img src=prvs.gif border=0></a><a href=../programme.html><img src=up.gif border=0></a><a href=140_Sparling_Michael.htm><img src=next.gif border=0></a>
</td></table>
</BODY></HTML>
