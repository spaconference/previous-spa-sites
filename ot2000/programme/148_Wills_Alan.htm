<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.5 [en] (Win98; I) [Netscape]">
   <title>OT 99 Proposal</title>
</head>
<body bgcolor="#FFFFFF">
<table OT=name><tr><td bgcolor=000000><b><font color=ffffff>148</font></b></td><td OT=nav><A href=145_Willoughby_Anthony.htm><img src=prvs.gif border=0></a><a href=../programme.html><img src=up.gif border=0></a><a href=149_Hill_Laura.htm><img src=next.gif border=0></a>
</td></table>

<center>
<h1>
Updating old software with UML/Catalysis</h1></center>

<center>
<h4>
Workshop 170 minutes</h4></center>

<center>
<h3>
How to have fewer bugs than you started with</h3></center>

<center>
<h2>
<a href="http://www.trireme.com/alan">Alan Cameron Wills</a></h2></center>

<blockquote>There are many "methods" of software development. Most of them
tend to assume you are working from scratch --- particularly those that
begin with some sort of abstract model. Such is not normally the case.
<p>Modifying software can be quite hard: not only do you have to get a
clear idea of what the requirements really are (difficult enough on its
own), but --- far more difficult --- you need to understand what the existing
(possibly incoherent and undocumented) code already does. Then you have
to work out how to economically bend the latter to meet the former.
<p>UML provides useful tools for understanding both requirements and existing
software, but the models you make look quite different: it perhaps isn't
obvious how they tie up. The key trick is to make a mapping or "retrieval"
between them, translating between the language of the new requirements
and that of the old code.
<br>&nbsp;
<br>&nbsp;</blockquote>

<h4>
<a href="http://www.trireme.com/alan">Alan Cameron Wills</a> (<a href="mailto:alan@trireme.com">alan@trireme.com</a>)</h4>

<table WIDTH="100%" >
<tr>
<td WIDTH="25%"><a href="http://www.trireme.com/">TriReme International
Ltd</a>
</td>

<td WIDTH="75%">Alan Cameron Wills has been a consultant in software development
since 1991, working with a clients in telecoms, finance, and commerce in
various parts of Europe and the USA. He is co-author of "Objects, Components
and Frameworks in UML -- the Catalysis approach".&nbsp;
<p>Alan likes taking <a href="http://www.trireme.com/alan/pix/index.html">pictures
of people</a> and sailing.</td>
</tr>
</table>

<h3>
Topics</h3>

<ul>
<li>
UML abstractions for requirements</li>

<li>
UML concrete for code</li>

<li>
Non-OO existing code</li>

<li>
Mapping between abstract and concrete</li>

<li>
Identifying deltas</li>

<li>
Patterns for updates</li>

<li>
Making it easier next time</li>

<br>&nbsp;
<p>&nbsp;
<br>&nbsp;
<br>&nbsp;</ul>

<h3>
Benefits</h3>
This session will look at techniques, taken from the Catalysis toolbag,
for updating existing software with the help of UML.
<table WIDTH="100%" >
<tr BGCOLOR="#80FFFF">
<td WIDTH="80%"><b>Session:</b> Workshop 170 minutes</td>

<td WIDTH="20%"><b>Level:</b> advanced</td>
</tr>

<tr BGCOLOR="#80FFFF">
<td><b>Audience:</b> Software developers concerned with updating existing
software, and with some experience of UML.&nbsp;</td>

<td><b>Max</b></td>
</tr>
</table>

<h4>
Material</h4>

<li>
Code for practising abstraction</li>

<li>
Requirements for practicing modelling</li>

<li>
Crib sheets for notation and procedures</li>

<li>
Poster summarising the method</li>

<h4>
Delivery</h4>
The session will record key enlightenments observed by the participants.
These will be made available as posters augmenting the method.
<p>The materials will be made available on the web.
<h4>
Format</h4>

<li>
Overview the topic and procedures, then:</li>

<li>
Each topic:</li>

<li>
short intro</li>

<li>
exercise</li>

<li>
discuss key procedural enlightenments</li>

<h4>
Structure</h4>
Each of the main stages will consist mainly of practice on a small but
representative example.
<p>000 Introduce problem
<br>010 Sort participants
<br>020 UML for requirements&nbsp;&nbsp;&nbsp; --- Abstraction of objects
and use-cases
<br>040 UML for code&nbsp; ---Depicting existing code
<br>060 - Non-OO code
<p>070 BREAK
<p>090 Mapping models&nbsp; --- Various levels of formality
<br>110 Identifying deltas
<br>130 Patterns for updates
<br>150 Making it easier next time&nbsp; ---- reusing the model
<br>160 Discussion
<br>u170 END
<hr> <table OT=name><tr><td bgcolor=000000><b><font color=ffffff>148</font></b></td><td OT=nav><A href=145_Willoughby_Anthony.htm><img src=prvs.gif border=0></a><a href=../programme.html><img src=up.gif border=0></a><a href=149_Hill_Laura.htm><img src=next.gif border=0></a>
</td></table>
</body>
</html>
<hr> <table OT=name><tr><td bgcolor=000000><b><font color=ffffff>148</font></b></td><td OT=nav><A href=145_Willoughby_Anthony.htm><img src=prvs.gif border=0></a><a href=../programme.html><img src=up.gif border=0></a><a href=149_Hill_Laura.htm><img src=next.gif border=0></a>
</td></table>
</BODY></HTML>
